---
- name: Setup AOT Demo Tower
  hosts: all
  become: True
  gather_facts: False

  tasks:
    # - name: Create Ansible Vault Password file
    #   template:
    #     src: ./vaultpass.j2
    #     dest: ./vaultpass
    #   run_once: true
    #   delegate_to: localhost
    #   tags:
    #     - license

    # - name: Decrypt Ansible Tower license file and save it as another file
    #   command: ansible-vault decrypt --vault-password-file=vaultpass tower.lic --output mytower.lic
    #   run_once: true
    #   delegate_to: localhost
    #   tags:
    #     - license

    # - name: Ensure EULA is accepted
    #   lineinfile:
    #     path: "./mytower.lic"
    #     line: '    "eula_accepted": true,'
    #     insertbefore: '"company_name"'
    #     state: present
    #   delegate_to: localhost
    #   run_once: true
    #   become: no
    #   tags:
    #     - addlicense
    
    # - name: Post license key
    #   uri:
    #     url: https://localhost/api/v2/config/
    #     method: POST
    #     user: "{{ towuser }}"
    #     password: "{{ towpass }}"
    #     body: "{{ lookup('file','./mytower.lic') }}"
    #     body_format: json
    #     validate_certs: False
    #     force_basic_auth: yes
    #   delegate_to: localhost
    #   run_once: true
    #   become: no
    #   tags:
    #     - addlicense

    - name: Add Insights SCM Credential to Tower
      tower_credential:
        name: Insights SCM Credential
        organization: Default
        kind: insights
        username: "{{ rhnuser }}"
        password: "{{ rhnpass }}"
        state: present
        tower_username: "{{ towuser }}"
        tower_password: "{{ towpass }}"
        tower_host: https://localhost
        validate_certs: no
      run_once: true
      delegate_to: localhost
      tags:
        - credential

    - name: Add Demo Machines SSH Credentials to Tower
      tower_credential:
        name: Machine SSH Credential
        organization: Default
        kind: ssh
        username: "{{ machinesshuser }}"
        password: "{{ machinesshpass }}"
        state: present
        tower_username: "{{ towuser }}"
        tower_password: "{{ towpass }}"
        tower_host: https://localhost
        validate_certs: no
      run_once: true
      delegate_to: localhost
      tags:
        - credential

    - name: Create Tower Inventory
      tower_inventory:
        name: "AOT Demo Inventory"
        organization: "Default"
        state: present
        tower_username: "{{ towuser }}"
        tower_password: "{{ towpass }}"
        tower_host: https://localhost
        validate_certs: no
      run_once: true
      delegate_to: localhost
      tags:
        - inventory

    - name: Import Hosts into Tower Inventory
      command: awx-manage inventory_import \
               --source="/home/{{ studentid }}/lab_inventory/hosts" \
               --inventory-name="AOT Demo Inventory"
      run_once: true
      delegate_to: localhost
      tags:
        - inventory

    - name: Create Insights Project in Tower
      # Using tower-cli because tower module does not have insights scm-type
      command: tower-cli project create -n "Insights Project" \
               --organization "Default" \
               --scm-type "insights" \
               --scm-credential "Insights SCM Credential" \
               --insecure \
               -u "{{ towuser }}" \
               -p "{{ towpass }}"
      run_once: true
      delegate_to: localhost
      tags:
        - project
    
    - name: Create AOT Demo Project in Tower
      tower_project:
        name: "AOT Demo Project"
        organization: "Default"
        scm_type: "git"
        scm_url: "https://github.com/nicholas-chia/aotdemo2019.git"
        # scm_credential: "gitlab"
        state: present
        tower_username: "{{ towuser }}"
        tower_password: "{{ towpass }}"
        tower_host: https://localhost
        validate_certs: no
      run_once: true
      delegate_to: localhost
      tags:
        - project

    - name: Sleep for 8 seconds and continue with play
      # To avoid template creation error in the next task
      wait_for:
        timeout: 8
      run_once: true
      delegate_to: localhost

    - name: Create Upload Insights Data Template
      tower_job_template:
        name: "Upload Insights Data"
        job_type: "run"
        inventory: "AOT Demo Inventory"
        project: "AOT Demo Project"
        playbook: "upload-insights-data.yml"
        credential: "Machine SSH Credential"
        state: "present"
        tower_username: "{{ towuser }}"
        tower_password: "{{ towpass }}"
        tower_host: https://localhost
        validate_certs: no
      run_once: true
      delegate_to: localhost
      tags:
        - template

    - name: Create OpenSCAP Scan and Upload Template
      tower_job_template:
        name: "OpenSCAP Scan and Upload"
        job_type: "run"
        inventory: "AOT Demo Inventory"
        project: "AOT Demo Project"
        playbook: "oscap-scan-and-upload.yml"
        credential: "Machine SSH Credential"
        state: "present"
        tower_username: "{{ towuser }}"
        tower_password: "{{ towpass }}"
        tower_host: https://localhost
        validate_certs: no
      run_once: true
      delegate_to: localhost
      tags:
        - template

- name: Setup AOT Demo Managed Nodes
  hosts: web
  become: True
  gather_facts: False
  vars:
    oscap_profile: xccdf_org.ssgproject.content_profile_standard
    oscap_policy: ssg-rhel7-ds
    scan_results: /tmp/scan.xml

  tasks:
    - name: Register as user with password and subscribe
      redhat_subscription:
        state: present
        pool: '^Red Hat Enterprise Linux Server$'
        username: "{{ rhnuser }}"
        password: "{{ rhnpass }}"
        force_register: true
        # auto_attach: true
      tags:
        - subscribe

    - name: Install Insights Client to Managed Nodes
      yum:
        name: insights-client
        state: latest
      tags:
        - insights

    - name: Register Insights Client to cloud.redhat.com
      command: insights-client --register
      tags:
        - insights
    
    - name: Install OpenSCAP Packages to Managed Nodes
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - openscap-scanner
        - scap-security-guide
      tags:
        - oscap

    - name: Clean up any previous scan results
      file:
        name: /tmp/scan.xml
        state: absent
      tags:
        - oscap

    - name: Run OpenSCAP scan
      command: oscap xccdf eval \
        --profile {{ oscap_profile }} \
        --results {{ scan_results }} \
        /usr/share/xml/scap/ssg/content/{{ oscap_policy }}.xml
      ignore_errors: yes
      tags:
        - oscap

    - name: Upload scan results to cloud.redhat.com
      command: insights-client \
        --verbose --payload {{ scan_results }} \
        --content-type application/vnd.redhat.compliance.something+tgz
      tags:
        - oscap

    # - name: Create Remediation Template
    #   tower_job_template:
    #     name: "Remediation with Red Hat Management Solutions"
    #     job_type: "check"
    #     inventory: "AOT Demo Inventory"
    #     project: "Insights Project"
    #     playbook: "aotdemoplaybook-b6960902-acd5-46b0-b32c-f1b84fa34d1f.yml"
    #     credential: "Machine SSH Credential"
    #     state: "present"
    #     tower_username: "{{ towuser }}"
    #     tower_password: "{{ towpass }}"
    #     tower_host: https://localhost
    #     validate_certs: no
    #   when: "{{ rhnuser }}" == "destinasia"
    #   run_once: true
    #   delegate_to: localhost
    #   tags:
    #     - template
